#!/bin/bash
#. ******* coding:utf-8 AUTOHEADER START v1.3 *******
#. vim: fileencoding=utf-8 sw=4 ts=4 et
#.
#. Â© 2007-2011 Nima Talebi <nima at autonomy dot net dot au>
#.                         <nt at securusglobal dot com dot au>
#.
#. $HeadURL::                                                                  $
#. $LastChangedBy::                                                            $
#. $LastChangedDate::                                                          $
#. $LastChangedRevision::                                                      $
#. $                                                                           $
#. $AutoHeaderSerial::20110315                                                 $
#.
#. This file is part of the Insecurity Suite.
#.
#.     Insecurity is free software: you can redistribute it and/or modify
#.     it under the terms of the GNU General Public License as published by
#.     the Free Software Foundation, either version 3 of the License, or
#.     (at your option) any later version.
#.
#.     Insecurity is distributed in the hope that it will be useful,
#.     but WITHOUT ANY WARRANTY; without even the implied warranty of
#.     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#.     GNU General Public License for more details.
#.
#.     You should have received a copy of the GNU General Public License
#.     along with Insecurity.  If not, see <http://www.gnu.org/licenses/>.
#.
#. THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED
#. WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#. MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#. EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
#. INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#. LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#. PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#. LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
#. OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#. ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#.
#. ADAPTED M. STONE & T. PARKER DISCLAIMER: THIS SOFTWARE COULD RESULT IN INJURY
#. AND/OR DEATH, AND AS SUCH, IT SHOULD NOT BE BUILT, INSTALLED OR USED BY ANYONE.
#. ******* AUTOHEADER END v1.3 *******

#. coding:utf-8
#. vim: fileencoding=utf-8 sw=4 ts=4 et

#. BUGS:
#.     grep: memory exhausted
#. TODO:
#.   * implement package management functions, and reap
#.   * Check default umask...DONE
#.   * Reap LVM data...DONE
#.   * Reap MDadm data...DONE
#.   * Get a list of users with shell access - getent passwd...DONE
#.     - For each user, grab:
#.       * ssh keys...DONE
#.       * crontabls...DONE
#.       * cat /proc/self/maps 32 times...XXX
#.       * cat /proc/cpuinfo...DONE
#.       * cat /proc/meminfo...DONE
#.       * tar /root and /proc
#.       * uname -a...DONE
#.       * ls -lR /dev...DONE
#.       * ls -lR /sys...DONE
#.       * ls -lR /proc...DONE
#.       * ls -lR /opt...DONE
#.       * ls -lR /srv...DONE
#.       * ls -lR /var/opt...DONE
#.       * ls -lR /usr/local...DONE

################################################################################
export RR_OPTS_GREP='-srni -D skip -E'
RR_PROC_SELF_MAPS=101xproc.self.maps

#. Prologue:
TGZ_D=/tmp
declare -A RR_SYSINFO

RR_INDENT_WIDTH=70

RR_MODE="script"
if [ ${NOT_SOURCED:=TRUE} == TRUE ]; then
    if [ $0 = "-bash" ]; then
        NOT_SOURCED=FALSE;
        printf "Loading manson (interactive shell)..."
        RR_MODE="shell"
    elif [ $0 = "-su" ]; then
        NOT_SOURCED=FALSE;
        printf "Loading manson (su)..."
        RR_MODE="su"
    else
        printf "Sourced manson..."
        RR_MODE="su"
    fi
elif [ ${NOT_SOURCED:=TRUE} == FALSE ]; then
    return
fi


################################################################################
#. Sanity Check:
e=0

#. Tripwire
if [ $e -ne 0 ]; then
    echo "Error: Bailing out early; this system is not sysconf-ready."
    if [ ${RR_MODE} == "shell" ]; then
        break
    elif [ ${RR_MODE} == "su" ]; then
        break
    else
        exit $e
    fi
fi

################################################################################
#. Main:

RR_DMIDATA=${DATA}/dmidata
RR_LOG_BELLS=( fatal crit alert error warn )
#print "$'%s'" % ''.join("\\x%x"%ord(_) for _ in profanity)

#. At times of frustration, admins and developers are likely to cut corners, in order
#. to achieve sought-after results; however that is not an indication that they feel
#. content with their actions.  They often express this frustration by way of practicing
#. profanity - in comments, variable names, or function names.  Here we create a list of
#. common profanity, in hope to provide clues as to files that are at a higher risk of
#. being configured in non-secure ways.
RR_LOL_BELLS=(
    $'\x73\x68\x69\x74'
    $'\x66\x75\x63\x6b'
    $'\x63\x75\x6e\x74'
    $'\x77\x68\x6f\x72\x65'
    $'\x62\x69\x74\x63\x68'
    $'\x68\x65\x6c\x6c'
    $'\x77\x74\x66'
)

stat > /dev/null 2>&1
test $? -eq 1 && GNU=1 || GNU=0
declare -A RR_CMD
if [ ${GNU} -eq 0 ]; then
    RR_CMD[sed]=$(which gsed 2>/dev/null)
    if [ $? -ne 0 ]; then
        echo "Please install GNU sed."
        E=1
    fi
else
    RR_CMD[sed]=$(which sed)
fi

declare -A RR_ANSI
RR_ANSI[Black]='\[\e[0;30m\]'
RR_ANSI[DarkGray]='\[\e[1;30m\]'
RR_ANSI[Red]='\[\e[0;31m\]'
RR_ANSI[LightRed]='\[\e[1;31m\]'
RR_ANSI[Green]='\[\e[0;32m\]'
RR_ANSI[LightGreen]='\[\e[1;32m\]'
RR_ANSI[Brown]='\[\e[0;33m\]'
RR_ANSI[Yellow]='\[\e[1;33m\]'
RR_ANSI[Blue]='\[\e[0;34m\]'
RR_ANSI[LightBlue]='\[\e[1;34m\]'
RR_ANSI[Purple]='\[\e[0;35m\]'
RR_ANSI[LightPurple]='\[\e[1;35m\]'
RR_ANSI[Cyan]='\[\e[0;36m\]'
RR_ANSI[LightCyan]='\[\e[1;36m\]'
RR_ANSI[LightGray]='\[\e[0;37m\]'
RR_ANSI[White]='\[\e[1;37m\]'
RR_ANSI[TitleStart]='\[\033]0;'
RR_ANSI[TitleEnd]='\007\]'
RR_ANSI[Reset]='\[\e[0m\]'

declare -A INDENT_SPACE
INDENT_SPACE[0]=0
INDENT_SPACE[1]=1
INDENT_SPACE[2]=3
INDENT_SPACE[3]=6
INDENT_SPACE[4]=9

function rr_color_set {
    color=$1
    setterm -term linux -default -foreground ${color} -bold on
}

function rr_color_off {
    setterm -term linux -default
}

function rr_cprintf {
    rr_color_set $1
    shift
    printf $*
    rr_color_off
}

function rr_echo_end() {
    if [ $# -gt 0 ]; then
        printf " [%s]\n" "$@"
    else
        printf "\n"
    fi
}

function rr_echo_crit() {
    if [ $1 -eq 0 ]; then
        rr_cprintf green "PASS"
        rr_echo_end
    else
        rr_cprintf red "CRIT"
        shift
        rr_echo_end "$@"
    fi
}

function rr_echo_fail() {
    if [ $1 -eq 0 ]; then
        rr_cprintf green "PASS"
        rr_echo_end
    else
        rr_cprintf red "FAIL"
        shift
        rr_echo_end "$@"
    fi
}

function rr_echo_warn() {
    if [ $1 -eq 0 ]; then
        rr_cprintf green "PASS"
        rr_echo_end
    else
        rr_cprintf yellow "WARN"
        shift
        rr_echo_end "$@"
    fi
}

function rr_echo_info() {
    rr_cprintf white "INFO"
    shift
    rr_echo_end "$@"
}

function rr_printf() {
    declare -i i=$1
    test $i -eq 0 || perl -e "printf('%s',' 'x${INDENT_SPACE[$i]});"; rr_cprintf green "%s" "\\___"
    shift

    local fmt="%-$((${RR_INDENT_WIDTH}-${INDENT_SPACE[$i]}))s"
    if [ $# -eq 1 ]; then
        printf "${fmt}" "$@"
    elif [ $# -eq 2 ]; then
        printf "%s%s\n" "$1" "$2"
    fi
    unset fmt
}

################################################################################

if [ ${RR_MODE} = "shell" ]; then
    printf "Done\n"
elif [ ${RR_MODE} = "su" ]; then
    printf "Done\n"
else
    printf "Done\n"
fi
