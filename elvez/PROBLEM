--[ The Assembly

% cat <<EOF > cpuid-pic.s
.section .text
.globl main

main:
    call unprotect
    jmp str

unprotect:
    popl   %ebx
    pushl  %ebx
    andl   $0xfffff000,%ebx #. Alignment to page (0x1000)
    mov    $0x100,%ecx      #. Let's unprotect a page
    mov    $0x7,%edx        #. PROT_READ|PROT_WRITE|PROT_EXEC
    mov    $0x7d,%eax       #. __NR_mprotect
    int    $0x80
    ret

cpuid:
    popl %edi             #. Move out output (defined in .data) to register %edi
    movl $0, %eax         #. Set %eax to 0 (an option for cpuid to get the vendor id)
    cpuid                 #. Make the system call to cpuid, which will output analogeous to: sprintf("%s%s%s", %ebx, %edx, %ecx)

    movl %ebx, 28(%edi)   #. Write registers to $output, at the given offsets (relative to start of output) 28, 32, 36
    movl %edx, 32(%edi)   #. Note the odd order that cpuid outputs, and that each is 4 bytes in size.
    movl %ecx, 36(%edi)   #. Also note that the 28th character is the first `x', and 39 is the last

    movl $4, %eax         #. __NR_write is 4, write this value to register %eax as usual
    movl $1, %ebx         #. for the write() system call, %ebx will be the output file descriptor (1 is stdout)
    movl %edi, %ecx       #. %ecx is the start of the output string
    movl $42, %edx        #. %edx is the strlen() of the string
    int  $0x80            #. Finally, once all registers are primed, make the system call
                          #. int generates a soft interrupt with a value of 0x80 - i.e. ask kernel to access console

    movl $1, %eax         #. __NR_exit is 1
    movl $0, %ebx         #. we want to exit with a exit status of 0 (success)
    int $0x80             #. again, interrupt the kernel

str:
    call cpuid
    .ascii "The processor vendor ID is 'xxxxxxxxxxxx'\n"
EOF

--[ Compilation and Execution
% as --32 -o cpuid-pic.o cpuid-pic.s
% ld -e main -melf_i386 -o asm-cpuid-pic cpuid-pic.o
% ./asm-cpuid-pic
Segmentation fault
% chpax -m asm-cpuid-pic
% ./asm-cpuid-pic
The processor vendor ID is 'GenuineIntel'

--[ Execution of raw byte-code via execve of a (char *)
% shell-elf2asciihex asm-cpuid-pic; echo
e802000000eb4a5b5381e300f0ffffb900010000ba07000000b87d000000cd80c35fb8000000000fa2895f1c895720894f24b804000000bb0100000089f9ba2a000000cd80b801000000bb00000000cd80e8cbffffff5468652070726f636573736f722076656e646f722049442069732027787878787878787878787878270a

% shellcoder $(shell-elf2asciihex asm-cpuid-pic)
The processor vendor ID is 'GenuineIntel'

--[ Storing the raw byte-code
% shell-elf2asciihex asm-cpuid-pic | shell-asciihex2bin | od -t x1
0000000 e8 02 00 00 00 eb 4a 5b 53 81 e3 00 f0 ff ff b9
0000020 00 01 00 00 ba 07 00 00 00 b8 7d 00 00 00 cd 80
0000040 c3 5f b8 00 00 00 00 0f a2 89 5f 1c 89 57 20 89
0000060 4f 24 b8 04 00 00 00 bb 01 00 00 00 89 f9 ba 2a
0000100 00 00 00 cd 80 b8 01 00 00 00 bb 00 00 00 00 cd
0000120 80 e8 cb ff ff ff 54 68 65 20 70 72 6f 63 65 73
0000140 73 6f 72 20 76 65 6e 64 6f 72 20 49 44 20 69 73
0000160 20 27 78 78 78 78 78 78 78 78 78 78 78 78 27 0a
0000200
% shell-elf2asciihex asm-cpuid-pic | shell-asciihex2bin > /tmp/shellcode

--[ Execution of raw byte-code via JMP to mmap(2)ed memory
cat << EOF > shuriken.s

.section .text
.globl main
main:
    jmp    str_shellcode_file

open:
    movl   $0,%ecx          #. O_RDONLY
    popl   %ebx             #. contains pathname to shellcode file
    movl   $0x05,%eax       #. __NR_open
    int    $0x80

lseek:
    movl   $2,%edx          #. int whence = SEEK_END
    movl   %ecx,%ecx        #. off_t offset = 0
    movl   %eax,%ebx        #. int filedes = <fd>
    movl   $0x13,%eax       #. __NR_lseek
    int    $0x80

mmap:
    subl   $24,%esp
    xor    %edx,%edx
    movl   %edx,0x00(%esp)   #. void *addr = NULL;
    movl   %eax,0x04(%esp)   #. size_t length = <offset>
    movl   $0x5,0x08(%esp)   #. int prot = PROT_READ|PROT_EXEC;
    movl   $0x1,0x0C(%esp)   #. int flags = MAP_SHARED;
    movl   %ebx,0x10(%esp)   #. int fd = <fd>;
    movl   $0x0,0x14(%esp)   #. off_t offset = 0;
    movl   $0x5a,%eax        #. __NR_mmap;
    movl   %esp,%ebx         #. %ebx must contain the address of input arguments
    int    $0x80

exec:
    jmp    *%eax             #. The rationale is that you aren't going to jump
                             #. to the address %eax; you're going to *load* the
                             #. value at %eax, and jump to that.

str_shellcode_file:
    call   open
    .ascii "/tmp/shellcode"

EOF

% as --32 -o shuriken.o shuriken.s
% ld -e main -melf_i386 -o asm-shuriken shuriken.o
% chpax -m asm-shuriken
% ./asm-shuriken
Segmentation fault
% strace ./asm-shuriken
execve("./asm-shuriken", ["./asm-shuriken"], [/* 62 vars */]) = 0
[ Process PID=2678 runs in 32 bit mode. ]
open("/tmp/shellcode", O_RDONLY)        = 3
lseek(3, 0, SEEK_END)                   = 128
old_mmap(NULL, 128, PROT_READ|PROT_EXEC, MAP_SHARED, 3, 0) = 0xffffffffde14c000
mprotect(0xde14c000, 256, PROT_READ|PROT_WRITE|PROT_EXEC) = -1 EACCES (Permission denied)
--- {si_signo=SIGSEGV, si_code=SEGV_ACCERR, si_addr=0xde14c072} (Segmentation fault) ---
+++ killed by SIGSEGV +++
Segmentation fault
%
